From: Alexei Lozovsky <me@ilammy.net>
Date: Fri, 4 Sep 2020 21:49:12 +0100
Subject: Hide unnecessarily exported symbols

Chibi libraries (accidentally) make some internal symbols public.
We don't want this and need to hide them.

"_huff_tab*" symbols are trickier in that they are used in both
sexp.c (locally) and in SRFI 95 (qsort.c), which expect them
to be exported when built as static library. That's why we only
mark them with __attribute__((visibility("hidden"))) so that
they are hidden from shared library exports, but are visible
when linking static libraries.

There are also some symbols in "vm.c" that should not be public
but they are. Hide them since they are not a part of API exported
via <chibi/sexp.h>
---
 include/chibi/sexp-hufftabs.c | 3 +++
 include/chibi/sexp-hufftabs.h | 3 +++
 vm.c                          | 4 ++--
 3 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/include/chibi/sexp-hufftabs.c b/include/chibi/sexp-hufftabs.c
index 7704184f..2da963ee 100644
--- a/include/chibi/sexp-hufftabs.c
+++ b/include/chibi/sexp-hufftabs.c
@@ -1,5 +1,7 @@
 /* auto-generated by ./symhuff.scm on Sun Feb 25 23:12:52 2007 */
 
+#pragma GCC visibility push(hidden)
+
 char _huff_tab21[] = {
   '\x01',  '\x00',  '\x03',  '\x00',  '\x02',  '\x00',  '\x04',  '\x00',
 };
@@ -90,3 +92,4 @@ char _huff_tab2[] = {
      'e',     't',
 };
 
+#pragma GCC visibility pop
diff --git a/include/chibi/sexp-hufftabs.h b/include/chibi/sexp-hufftabs.h
index 7704184f..2da963ee 100644
--- a/include/chibi/sexp-hufftabs.h
+++ b/include/chibi/sexp-hufftabs.h
@@ -1,5 +1,7 @@
 /* auto-generated by ./symhuff.scm on Sun Feb 25 23:12:52 2007 */
 
+#pragma GCC visibility push(hidden)
+
 char _huff_tab21[] = {
   '\x01',  '\x00',  '\x03',  '\x00',  '\x02',  '\x00',  '\x04',  '\x00',
 };
@@ -90,3 +92,4 @@ char _huff_tab2[] = {
      'e',     't',
 };
 
+#pragma GCC visibility pop
diff --git a/vm.c b/vm.c
index 4ce48e1b..80ec085c 100644
--- a/vm.c
+++ b/vm.c
@@ -41,7 +41,7 @@ static sexp sexp_lookup_source_info (sexp src, int ip) {
 }
 #endif
 
-sexp sexp_get_stack_trace (sexp ctx) {
+static sexp sexp_get_stack_trace (sexp ctx) {
   sexp_sint_t i, fp=sexp_context_last_fp(ctx);
   sexp self, bc, src, *stack = sexp_stack_data(sexp_context_stack(ctx));
   sexp_gc_var2(res, cell);
@@ -65,7 +65,7 @@ sexp sexp_get_stack_trace (sexp ctx) {
   return res;
 }
 
-void sexp_print_extracted_stack_trace (sexp ctx, sexp trace, sexp out) {
+static void sexp_print_extracted_stack_trace (sexp ctx, sexp trace, sexp out) {
   sexp self, bc, src, ls;
   if (! sexp_oportp(out))
     out = sexp_current_error_port(ctx);
-- 
2.25.1

